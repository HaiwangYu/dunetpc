#include "services_dune.fcl"
#include "largeantmodules_dune.fcl"
#include "detsimmodules_dune.fcl"
#include "photpropservices_dune.fcl"
#include "CORSIKAGendp.fcl"
#include "tools_dune.fcl"


process_name: CosmicsDP

services: @local::protodunedphase_simulation_services

  # Load the service that manages root files for histograms.
services.TFileService: { fileName: "cosmics_corsika_rotation_hist.root" }
services.TimeTracker:  {}
services.RandomNumberGenerator: {} #ART native random number generator
                @table::dunefddphase_simulation_services
services.FileCatalogMetadata:  @local::art_file_catalog_mc
services.NuRandomService:       @local::random_NuRandomService  # seedservice.fcl
services.Geometry: @local::protodunedphase_geo
services.DetectorPropertiesService: @local::protodunedphase_detproperties



#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   10          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   rns:       { module_type: "RandomNumberSaver" }
   generator:           @local::standard_CORSIKAGendp_CMC
   largeant:            @local::dunefd_largeant
   daq:                 @local::dune_detsim
 }

 #define the producer and filter modules for this path, order matters,
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ rns,
            generator,
            largeant,
            daq
            ]

 #define the output stream, there could be more than one if using filters
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event,
 #ie filters and producers
 trigger_paths: [simulate]

 #end_paths is a keyword and contains the paths that do not modify the art::Event,
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a 
SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "cosmics_protodunedp.root" #default file name, can override from command line with -o or --output
   dataTier:    "cosmic-detsim"
   compressionLevel: 1
 }
}

#specific to cosmic sim
physics.producers.generator.DoRotation:          true

physics.producers.generator.SampleTime:          8e-3
physics.producers.generator.TimeOffset:          -4e-3 #4.0 ms readout should start at -0.875 ms to match data
physics.producers.generator.BufferBox:           [ -300.0, 300.0, -300.0, 300.0, -300.0, 300.0 ]   #in cm
physics.producers.generator.ShowerAreaExtension: 2000
physics.producers.generator.RandomXZShift:       2000     #amount to randomly shift shower start point in x & z [cm] (default is 1000)
physics.producers.generator.ProjectToHeight:     856  #height to which particles are projected in cm

physics.producers.generator.ShowerInputFiles:     [
                                                    "/pnfs/larsoft/persistent/physics/cosmics/CERN/CORSIKA/standard/p_showers_*",
                                                   "/pnfs/larsoft/persistent/physics/cosmics/CERN/CORSIKA/standard/He_showers_*",
                                                   "/pnfs/larsoft/persistent/physics/cosmics/CERN/CORSIKA/standard//N_showers_*",
                                                   "/pnfs/larsoft/persistent/physics/cosmics/CERN/CORSIKA/standard//Mg_showers_*",
                                                   "/pnfs/larsoft/persistent/physics/cosmics/CERN/CORSIKA/standard//Fe_showers_*"
                                               ] #list of sqlite dbs with corsika showers


#standard DP sim

#services.NuRandomService:       @local::random_NuRandomService  # seedservice.fcl

services.LArG4Parameters.MinNumberOfElCluster: 20
#PhotonVisibilityService in photoproservices_dune.fcl. Has to be adapted to protodunedp?
services.PhotonVisibilityService: @local::dune10kt_workspace_photonvisibilityservice

# Use fixed values instead of DB for pedestals.
services.DetPedestalService: @local::dunedp_fixedpeds

# DetSim flags.
physics.producers.daq.NoiseOn:           true
physics.producers.daq.PedestalOn:        true
physics.producers.daq.DistortOn:         false
physics.producers.daq.SuppressOn:        false #false when noise on!
physics.producers.daq.KeepEmptyChannels: true

# DetSim services.
#services.SimChannelExtractService:      @local::scxgeneric
services.ChannelNoiseService:            @local::chnoiseold
services.PedestalAdditionService:        @local::padprovided

services.DetPedestalService: @local::dunedp_fixedpeds
services.DetPedestalService.FixedDetPedestal.PedMeanErrY: 0
services.DetPedestalService.FixedDetPedestal.PedMeanErrZ: 0
services.DetPedestalService.FixedDetPedestal.PedMeanY: 60
services.DetPedestalService.FixedDetPedestal.PedMeanZ: 60
services.DetPedestalService.FixedDetPedestal.PedRmsErrY: 0
services.DetPedestalService.FixedDetPedestal.PedRmsErrZ: 0
services.DetPedestalService.FixedDetPedestal.PedRmsY: 0
services.DetPedestalService.FixedDetPedestal.PedRmsZ: 0

services.AdcDistortService:              @local::stuckbits
#services.AdcSuppressService:            @local::zslegacy
services.AdcSuppressService:             @local::zsonline
#services.AdcCompressService:            @local::cmpblock
services.AdcCompressService:             @local::cmpreplace

services.SignalShapingServiceDUNEDPhase.ADCpermV: 0.48
services.DetectorPropertiesService.Electronlifetime:  1000.0e3         #in us

services.RawDigitExtractService:     @local::rdx_std
services.RawDigitExtractService.PedestalOption:    1

services.RawDigitPrepService:        @local::adcprep_sim
services.RawDigitPrepService.DoNoiseRemoval:       false
services.RawDigitPrepService.DoDeconvolution:      false
services.RawDigitPrepService.DoROI:                true

services.AdcNoiseRemovalService:    @local::adcnr_dunedphase3x1x1
services.AdcNoiseRemovalService.LowPassFlt:        false
services.AdcNoiseRemovalService.Flatten:           false
services.AdcNoiseRemovalService.CorrMode:          "median"
services.AdcNoiseRemovalService.Coherent32:        true
services.AdcNoiseRemovalService.Coherent16:        true
services.AdcNoiseRemovalService.Coherent16Groups:  [6, 7, 16, 17, 18, 19]
services.AdcNoiseRemovalService.RoiStartThreshold: 7
services.AdcNoiseRemovalService.RoiEndThreshold:   6
services.AdcNoiseRemovalService.RoiPadLow:         8
services.AdcNoiseRemovalService.RoiPadHigh:       40

services.AdcWireBuildingService:     @local::adcwire_std
#
services.AdcRoiBuildingService:      @local::adcroi_dunefddphase
services.AdcRoiBuildingService.NSigmaStart:       -20  # 1.25: only pulses with ADC >= NSigmaStart*8
services.AdcRoiBuildingService.NSigmaEnd:         -20  # 1.25: only pulses with ADC >= NSigmaStart*8
#services.AdcRoiBuildingService.UseFilter:      true

#services.AdcRoiBuildingService.NSigmaStart:       0.5
#services.AdcRoiBuildingService.NSigmaEnd:         0.0

# services.message.destinations.LogStandardOut.threshold: "INFO"


#===================New noise module ===========================================
#Configure realistic noise service for DP detectors based on the 311 data
#NB: Hardcoded unrotated geometry:

services.ChannelNoiseService:{
service_provider: DPhaseRealisticNoiseService
NoiseModel:    "$MRB_SOURCE/dunetpc/dune/DetSim/NoiseModels/729-0_fft_mirror.root"    #path to the noise model root file
RandomizeX:    15. #0.002
RandomizeY:    15. #0.002
Smooth:        1000
SetFirst0:     false
SetBaseline:   false   #if true sum baseline to real noise model
NoiseArrayPoints: 1000
OldNoiseIndex: false   #From ExponentialChannelNoiseService. Keep false
}
