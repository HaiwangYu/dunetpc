#include "services_dune.fcl"
#include "RawDecoder.fcl"

services: {

  TimeTracker:       {}
  RandomNumberGenerator: {}

  @table::protodune_rawdecoding_services
  
  TFileService: { 
   closeFileFast: true  # default
   fileName:  "%ifb_rawanal_tfile.root"
   tmpDir: "<parent-path-of-filename>"
  }
}

physics: {
  
  producers: {
    ssprawdecoder: @local::ssp_raw_decoder_split  
    timingrawdecoder: @local::timing_raw_decoder  
    ctbrawdecoder: @local::ctb_raw_decoder
  }

  analyzers: {

     sspanaext: { 
      module_type:     "PDWaveform" #SSPRawDecoder" #PDWaveform"
      SSPInputModule:  "ssprawdecoder"
      SSPInstanceName: "external"		       
      SSP_m1: 10 #samples used to calculate peak height
      SSP_m2: 10 #samples used to calculate integral
      SSP_i1: 40 #samples used to calculate pedestal
      SSP_i2: 1200 #samples used to calculate peak height
     
      SSP_readout_pretrigger: 50 #internal pretrigger tick wait
      SSP_Corr_Chan_1: 0 #correlation channel 1
      SSP_Corr_Chan_2: 1 #correlation channel 2
     
      SSP_wfm_verbose: 0
     
      PDwaveform_fft: 0 #only really usefule for underbiased, so allow turn off
      
      SSP_peak: 1 #Peak finding for integrator setting, 0 means no integration, 1 means loose finding (takes multipeak forms), 2 means strict (peaks must be by themselves and have clear baselines)
      SSP_smoothing: 0 #Basic 353 waveform smoothing (Root standard for 1D histos, 0 means no smoothing)
      SSP_rare_num: 3.0 #number of standard deviations from base peaks must be to be found
      SSP_peak_sense: 0.5 #(0-1), sets how sensitive peak finder is to finding peaks
      SSP_nump: 100 #Max number of peaks allowed for waveform
      SSP_disc_width: 10 #discrimination window width
      SSP_calib_win: 250 #calibration integration window length for internal triggers

	
     
      SelectEvents: [ produce ]
    }

  } 
  

  produce: [ timingrawdecoder, ctbrawdecoder, ssprawdecoder ] 
  #produce: [ timingrawdecoder, ssprawdecoder ]
  analyze: [ sspanaext ]
  output: [ out1 ]
  trigger_paths : [ produce ]
  #end_paths: [ output, analyze ]
  end_paths:[analyze]
}

outputs: {

  out1: {
    compressionLevel: 1
    module_type: RootOutput
    fileName: "%ifb_rawanal.root"
  }

}

source: {
  module_type: RootInput
  fileNames: [ "/afs/cern.ch/user/s/sergiand/workspace/artdaq_devel/pdune_r1000077_sr01_20170629T181646_1_0.root" ]
  maxEvents : -1
}

process_name: RunRawDecoder
