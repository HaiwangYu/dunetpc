BEGIN_PROLOG

timing_raw_decoder:
{
  module_type: "TimingRawDecoder"
  RawDataLabel: "daq"
  OutputDataLabel: "daq"
  UseChannelMap: "true"
  Debug: "false"
  MakeTree: "false"
}

rce_raw_decoder:
{
  module_type: "RceRawDecoder"
  RawDataLabel: "daq"
  OutputDataLabel: "daq"
  ExpectContainerFragments: true
}

felix_raw_decoder:
{
  module_type: "FelixRawDecoder"
  RawDataLabel: "daq"
  OutputDataLabel: "daq"
  ExpectContainerFragments: true
}

# configuration for combined TPC Raw Decoder module

pdsp_tpc_raw_decoder:
{
  module_type: "PDSPTPCRawDecoder"
  OutputDataLabel: "daq"

  RCERawDataLabel: "daq"
  RCERawDataContainerInstance: "ContainerTPC"
  RCERawDataNonContainerInstance: "TPC"
  RCEFragmentType: 2
  RCEDropEventsWithSmallFrags: false
  RCEDropSmallFrags: true
  RCESmallFragSize: 10000
  RCEDropFragsWithBadCSF: true    # skip fragments with invalid crate, slot, and fiber numbers
  RCEHexDump: false

  FELIXRawDataLabel: "daq"
  FELIXRawDataContainerInstance: "ContainerFELIX"
  FELIXRawDataNonContainerInstance: "FELIX"
  FELIXFragmentType: 8  
  FELIXDropFragsWithBadCSF: true
  FELIXEnforceExactCrateNumber: false
  FELIXCrateNumberToCheck: 6
  FELIXHexDump: false
  FELIXDropEventsWithSmallFrags: false
  FELIXDropSmallFrags: true
  FELIXSmallFragSize: 10000

  CompressHuffman: false
  PrintColdataConvertCount: false

  MakeHistograms: false #for making error monitoring histograms

# enforcement flags.  If these are set to true and the data completeness 
# conditions are not met, then an emtpy collection of raw::RawDigits is 
# put in the event

# if set to true, the number of channels present in the fragments must be
# the FullChannelCount below.

  EnforceFullChannelCount: false
  FullChannelCount: 15360

# requires that we don't see the same channel twice in in an event

  EnforceNoDuplicateChannels: true

# requires that all channels have the same number of ticks (on each event separately)

  EnforceSameTickCount: false

# requires that all channels have the specified number of ticks

  EnforceFullTickCount: false
  FullTickCount: 6000

# requires that no errors are reported by the unpacker (checksum or capture errors)

  EnforceErrorFree: false

}

ssp_raw_decoder:
{

  module_type: "SSPRawDecoder"
  RawDataLabel: "daq"
  OutputDataLabel: "daq"
#  UseChannelMap: "true"
  UseChannelMap: "false"
  Debug: "false"
  MakeTree: "false"
  verbose_metadata: false
  verbose_adcs: 0

  number_of_packets: 12  # number of channels per SSP

  SSP_m1: 10   # samples used to calculate peak height
  SSP_m2: 10   # (unused in the code)
  SSP_i1: 500  # samples used to calculate pedestal
  SSP_i2: 500  # samples used to calculate peak height

  NOvAClockFrequency: 64.0 # MHz
  SPESize: 25
}

ctb_raw_decoder:
{
  module_type: "PDSPCTBRawDecoder"
  InputLabel: "daq"
  InputContainerInstance: "ContainerTRIGGER"
  InputNonContainerInstance: "TRIGGER"
  OutputLabel: "daq"
}

online_monitor:
{
  module_type:     "OnlineMonitor"
  TPCInputModule:  "rcerawdecoder"
  TPCInstanceName: "daq"
  FELIXInputModule:  "felixrawdecoder"
  FELIXInstanceName: "daq"
}

tpc_fft:
{
  module_type:     "TpcFFT"
  TPCInputModule:  "rcerawdecoder"
  TPCInstanceName: "daq"  
}

ssp_evt_analyzer:
{
  module_type:     "PDRawEVD"
  SSPInputModule:  "ssprawdecoder"
  SSPInstanceName: "daq"  
}

END_PROLOG
