#include "services_dune.fcl"
#include "CRT.fcl"

process_name: CRTSim

services:
{
  # Load the service that manages root files for histograms.
  #TFileService: { fileName: "HelloAuxDet_hist.root" }
  TimeTracker:       {}
  MemoryTracker:     {}
  RandomNumberGenerator: {} #ART native random number generator
  message:              @local::dune_message_services_prod_debug
  FileCatalogMetadata:  @local::art_file_catalog_mc
                        @table::protodune_services
  TFileService:      { fileName: "CRTSim.root" }
  IFBeam:            {}
}
#services.message.destinations.LogStandardOut.threshold: "INFO" 

dune_message_services_prod_debug.destinations.LogWarningFile.categories:
{
  timeToHits: { limit: 1000 }
  CreateTrigger: { limit: 1000 }
  moduleToChannels: { limit: 1000 }
}

#Configure message service for debugging
#services.message.destinations.debugmsg:
#{
#  type: "cout" 
#  threshold: "DEBUG"
#  append: true
#  categories:
#  {
#    timeToHits: { limit: 1000 }
#    CreateTrigger: { limit: 1000 }
#    moduleToChannels: { limit: 1000 }
#  }
#}

source:
{
  module_type: RootInput
  maxEvents: -1
  fileNames: ["input_file.root"]
}

physics:
{
  analyzers:
  {
    #TODO: Validation module
  }
  producers:
  {
    CRTSim: @local::CRTSim_standard
  }

  stream1: [ out1 ]

  detSim: [ CRTSim ]
  #ana:  [ validation ]
 
  trigger_paths: [ detSim ]

  end_paths:     [ stream1 ] #ana ]
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "CRTDetSim_protoDUNE.root" #default file name, can override from command line with -o or --output
   dataTier: "DetSim"
   compressionLevel: 1
 }
}

CRTSim.DACThreshold: 100 #Make the DAC threshold so high that nothing will pass it
