#include "DAQSimAna.fcl"
#include "standard_detsim_dune10kt_1x2x6.fcl"


process_name: PrimSim

services: @local::dunefd_simulation_services
services.TFileService: { fileName: "DAQSimAna_plus_trigprim.root" }
services.TimeTracker:       {}
services.MemoryTracker:         { } # default is one
services.RandomNumberGenerator: {} #ART native random number generator
// services.FileCatalogMetadata:  @local::art_file_catalog_mc
services.NuRandomService:       @local::standard_NuRandomService  # seedservice.fcl
services.message:              @local::dune_message_services_prod
#source is now a root file
source: {
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics: {
   producers: {
      simwire: {
         module_type: "SimWireDUNE"
         SimChannelLabel: "largeant"
         NoiseOn: true
         PedestalOn: true
         DistortOn: false
         SuppressOn: false
         KeepEmptyChannels: true
         AdcSimulator:      "adcsim_ideal"
      }
      
      trigprim: {
         module_type: "TriggerPrimitiveFinder"
         InputTag: "simwire"
      }
      rns:            { module_type: "RandomNumberSaver" }
   }
   
   analyzers:
   {
      daqanatrigprim:     @local::standard_daqsimana
   }

   simulate: [ rns, simwire, trigprim ]
   ana: [ daqanatrigprim ]
   // stream1:  [ out1 ]
   trigger_paths: [simulate] 
   //end_paths:     [stream1]  
   #ana: [ daqanafasth ]
   end_paths: [ ana ] 

}

# outputs: {
#    out1: {
#       module_type: RootOutput
#       fileName:    "%ifb_trigprim.root"
#       dataTier:    "detector-simulated"
#       compressionLevel: 1
#       # Remove all the rawdigits, since they're huge and entirely noise
#       # Get rid of any reco information that might have been in the input file too
#       #
#       # Form of the string is:
#       # data product type _ module label _ instance _ process name
#       outputCommands: ["keep *_*_*_*", "drop *_simwire__PrimSim", "drop *_daq__NoZSDetsim", "drop *_*__Reco" ]
      
#    }
# }

# DetSim services. These are used by SimWire to add noise and
# pedestals to the incoming (noise-free) waveforms
services.SimChannelExtractService: @local::scxgeneric
services.ChannelNoiseService: @local::chnoiseold
services.PedestalAdditionService: @local::padprovided
services.AdcDistortService: @local::stuckbits
services.AdcSuppressService: @local::zsnone
services.AdcCompressService: @local::cmpreplace
services.DetPedestalService: @local::dune_fixedpeds

physics.analyzers.daqanatrigprim.HitLabel: "trigprim"
physics.analyzers.daqanatrigprim.MARLEYLabel: "marley"

# Shut up the backtracker
services.message.destinations.LogStandardOut.categories.BackTracker.limit: 0
services.message.destinations.LogStandardError.categories.BackTracker.limit: 0

# The name of the trigger primitive finder implementation to use
#  (replace the service_provider with your own)
services.TriggerPrimitiveFinderService: {
   service_provider: "TriggerPrimitiveFinderPass1"
   Threshold: 600
}